@using BrazorChart.Items
@using PSC.Blazor.Components.Chartjs
@using PSC.Blazor.Components.Chartjs.Enums
@using PSC.Blazor.Components.Chartjs.Models
@using PSC.Blazor.Components.Chartjs.Models.Common
@using PSC.Blazor.Components.Chartjs.Models.Bar
@using PSC.Blazor.Components.Chartjs.Models.Bubble
@using PSC.Blazor.Components.Chartjs.Models.Doughnut
@using PSC.Blazor.Components.Chartjs.Models.Line
@using PSC.Blazor.Components.Chartjs.Models.Pie
@using PSC.Blazor.Components.Chartjs.Models.Polar
@using PSC.Blazor.Components.Chartjs.Models.Radar
@using PSC.Blazor.Components.Chartjs.Models.Scatter
@using System.Drawing
@using QualCharts

<section class="section">
    <h1>Counter</h1>
    <div class="columns is-desktop is-multiline">
        <div class="column is-half">
            <Chart Config="_config1" @ref="_chart1"></Chart>
        </div>
        <div class="column">
            <p>Current count: @currentCount</p>

            <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
        </div>
        <div class="column is-half">
            <p>Rader</p>
            <p>ClickString</p>
        </div>
        <div class="column is-half">
            <Chart Config="radarChartConfig" @ref="rader"></Chart>
        </div>
    </div>
</section>




@code {
    private int currentCount = 0;
    private BarChartConfig _config1=new();
    private RadarChartConfig radarChartConfig = new();
    private Chart _chart1=new();
    private Chart rader = new();
    string ClickString { get; set; } = string.Empty;
    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        // AddNewDataset();
        await base.OnInitializedAsync();

        _config1 = new BarChartConfig()
            {
                Options = new Options()
                {
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Align =Align.Center,
                            Display = false,
                            Position = LegendPosition.Right
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
        {
            {
                Scales.XAxisId, new Axis()
                {
                    Stacked = true,
                    Ticks = new Ticks()
                    {
                        MaxRotation = 0,
                        MinRotation = 0
                    }
                }
            },
            {
                Scales.YAxisId, new Axis()
                {
                    Stacked = true
                }
            }
        }
                }
            };

        var list = ChartItemFactory.Create();
        _config1.Data.Labels = list.Select(t => t.Name).ToList();
        _config1.Data.Datasets.Add(new BarDataset()
            {
                Label = "Value",
                Data = list.Select(t=>new decimal?(t.Value)).ToList(),
                BorderWidth = 1
            });

        radarChartConfig = (RadarChartConfig)ChartConfigFactory.CreateRaderConfig();
        radarChartConfig.Data.Labels = list.Select(t => t.Name).ToList();
        radarChartConfig.Data.Datasets.Add(
            new RadarDataset()
            {
                    Label="test",
                    Data = list.Select(t => new decimal?(t.Value)).ToList(),
                    // BorderColor = "rgba(0, 184, 156,1.0)",//primary
                    // BackgroundColor = "rgba(0, 184, 156,0.5)"//primary
                    BorderColor = ColorPallet.Default.Link.ToRgbaString(),//primary
                    BackgroundColor = ColorPallet.Default.Danger.ToRgbaString(0.2)//primary
            }
        );
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // AddNewDataset();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private void AddNewDataset()
    {
        Random rd = new Random();
        List<decimal?> addDS = new List<decimal?>();
        for (int i = 0; i < 8; i++)
        {
            addDS.Add(rd.Next(i, 200));
        }

        var color = String.Format("#{0:X6}", rd.Next(0x1000000));
        var newdataset = new BarDataset()
            {
                Label = $"Dataset {DateTime.Now}",
                Data = addDS,
                Fill = false
            };
        _chart1.AddDataset<BarDataset>(newdataset);
    }
    public ValueTask onClickAsync(CallbackGenericContext value)
    {
        ClickString = $"Dataset index: {value.DatasetIndex} - Value index: {value.DataIndex} - Value: {value.Value}";
        StateHasChanged();

        return ValueTask.CompletedTask;
    }
}